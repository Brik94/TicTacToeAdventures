@using TicTacToe.Shared;
@using Controllers;
@inject NavigationManager NavigationManager

<div class="board">
    <h1 class="gameTitle">Tic Tac Toe</h1>

    <table>
        <tr>
            <td disabled=@IsDisabled @onclick="(() => UpdateBoard(0))">
                @_gameEngine.GameBoard[0]
            </td>
            <td disabled=@IsDisabled @onclick="(() => UpdateBoard(1))" class="vert">
                @_gameEngine.GameBoard[1]
            </td>
            <td disabled=@IsDisabled @onclick="(() => UpdateBoard(2))">
                @_gameEngine.GameBoard[2]
            </td>
        </tr>
        <tr>
            <td disabled=@IsDisabled @onclick="(() => UpdateBoard(3))" class="hori">
                @_gameEngine.GameBoard[3]
            </td>
            <td disabled=@IsDisabled @onclick="(() => UpdateBoard(4))" class="vert hori">
                @_gameEngine.GameBoard[4]
            </td>
            <td disabled=@IsDisabled @onclick="(() => UpdateBoard(5))" class="hori">
                @_gameEngine.GameBoard[5]
            </td>
        </tr>
        <tr>
            <td disabled=@IsDisabled @onclick="(() => UpdateBoard(6))">
                @_gameEngine.GameBoard[6]
            </td>
            <td disabled=@IsDisabled @onclick="(() => UpdateBoard(7))" class="vert">
                @_gameEngine.GameBoard[7]
            </td>
            <td disabled=@IsDisabled @onclick="(() => UpdateBoard(8))">
                @_gameEngine.GameBoard[8]
            </td>
        </tr>
    </table>
</div>

<h1>@_gameController.StatusMessage</h1>

@code {
        //TODO: Handle players
        //TODO: Check for Win/Tie
        //TODO: Disable UI
    private ServerGameController _gameController;
    private GameEngine _gameEngine;
    //private string _statusMessage = null;
    //private char _clientPlayer;
    protected bool IsDisabled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _gameController = new ServerGameController();
        _gameEngine = new GameEngine();

        IsDisabled = false;

        await _gameController.StartGame();
        await base.OnInitializedAsync();
    }

    //Hub Updates
    private void ClientLog(string msg)
    {
        Console.WriteLine(msg.ToString());
    }

    private void SetPlayer(char player)
    {
        _gameController.ClientPlayer = player;
        Console.WriteLine("Player Game Piece: " + _gameController.ClientPlayer);
    }

    private void ReceiveEndGameUpdate(string update)
    {
        _gameController.StatusMessage = update;
        StateHasChanged();
    }

    //Hub Senders
    private async Task UpdateBoard(int move)
    {
        if (!IsDisabled)
        {
            bool moveSucceeded = _gameEngine.TryPlayerMove(move, _gameController.ClientPlayer);
            if (moveSucceeded)
            {
                IsDisabled = true;
                Console.WriteLine($"UpdateBoard. Move: {move}, IsDisabled: {IsDisabled}");

                await _gameController.SendMoveToOpponent(move, _gameController.ClientPlayer);
                StateHasChanged();
            }
        }
        else
        {
            Console.WriteLine("UI Disabled. Not your turn.");
        }

        await Task.CompletedTask;
    }

    //TODO: Refactor this whole method.
    private async Task ReceiveOpponentMove()
    {
        var opponent = _gameController.Opponent.Piece;
        var move = _gameController.Opponent.Move;


        bool moveSucceeded = _gameEngine.TryPlayerMove(move, opponent);
        if (moveSucceeded)
        {
            IsDisabled = false;
            Console.WriteLine($"Received Move from {opponent}. IsDisabled: {IsDisabled}");
            StateHasChanged();
        }

        //TODO: Replace with _gameController call.
        await CheckForEndGame(opponent);
    }

    private async Task CheckForEndGame(char opponent)
    {
        if (_gameEngine.CheckForWin())
        {
            Console.WriteLine($"Opponent wins :(");
            await _gameController.SendEndGameUpdate($"{opponent} wins!");
        }
        else if (_gameEngine.CheckForTie())
        {
            Console.WriteLine("Tie game :(");
            await _gameController.SendEndGameUpdate("Tie game :(");
        }

        StateHasChanged();
        await Task.CompletedTask;
    }
}
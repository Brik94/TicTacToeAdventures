@using TicTacToe.Shared;
@using Controllers;
@inject NavigationManager NavigationManager

<div class="board">
    <h1 class="gameTitle">Tic Tac Toe</h1>

    <table>
        <tr>
            <td disabled=@IsDisabled @onclick="(() => ProcessClientMove(0))">
                @_gameEngine.GameBoard[0]
            </td>
            <td disabled=@IsDisabled @onclick="(() => ProcessClientMove(1))" class="vert">
                @_gameEngine.GameBoard[1]
            </td>
            <td disabled=@IsDisabled @onclick="(() => ProcessClientMove(2))">
                @_gameEngine.GameBoard[2]
            </td>
        </tr>
        <tr>
            <td disabled=@IsDisabled @onclick="(() => ProcessClientMove(3))" class="hori">
                @_gameEngine.GameBoard[3]
            </td>
            <td disabled=@IsDisabled @onclick="(() => ProcessClientMove(4))" class="vert hori">
                @_gameEngine.GameBoard[4]
            </td>
            <td disabled=@IsDisabled @onclick="(() => ProcessClientMove(5))" class="hori">
                @_gameEngine.GameBoard[5]
            </td>
        </tr>
        <tr>
            <td disabled=@IsDisabled @onclick="(() => ProcessClientMove(6))">
                @_gameEngine.GameBoard[6]
            </td>
            <td disabled=@IsDisabled @onclick="(() => ProcessClientMove(7))" class="vert">
                @_gameEngine.GameBoard[7]
            </td>
            <td disabled=@IsDisabled @onclick="(() => ProcessClientMove(8))">
                @_gameEngine.GameBoard[8]
            </td>
        </tr>
    </table>
</div>

<h1>@_gameController.State.StatusMessage</h1>
<h1>You are player @_gameController.State.ClientPiece</h1>

@code {
    //TODO: Disable UI
    private ServerGameController _gameController;
    private GameEngine _gameEngine;
    protected bool IsDisabled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _gameEngine = new GameEngine();

        _gameController = new ServerGameController();
        _gameController.StartGame += EnableUI;
        _gameController.UIUpdateEvent += UpdateUIState;
        _gameController.OpponentUpdatedEvent += UpdateOpponentMove;
        await _gameController.Initialize();

        IsDisabled = _gameController.State.UIDisabled;
        await base.OnInitializedAsync();
    }

    private void EnableUI(object sender, EventArgs e)
    {
        IsDisabled = _gameController.State.UIDisabled;
        StateHasChanged();
    }

    private void UpdateUIState(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private void UpdateOpponentMove(object sender, EventArgs e)
    {
        ProcessOpponentMove();
        CheckForEndGame();
    }

    private async void CheckForEndGame()
    {
        if (_gameEngine.CheckForWin())
        {
            IsDisabled = true;
            Console.WriteLine($"Opponent wins :(");
            await _gameController.SendEndGameUpdate($"{_gameController.State.OpponentPiece} wins!");
        }
        else if (_gameEngine.CheckForTie())
        {
            IsDisabled = true;
            Console.WriteLine("Tie game :(");
            await _gameController.SendEndGameUpdate("Tie game :(");
        }

        StateHasChanged();
    }

    private async Task ProcessClientMove(int move)
    {
        if (!IsDisabled)
        {
            bool moveSucceeded = _gameEngine.TryPlayerMove(move, _gameController.State.ClientPiece);
            if (moveSucceeded)
            {
                IsDisabled = true;
                Console.WriteLine($"ProcessClientMove. YourMove: {move}, IsDisabled: {IsDisabled}");

                await _gameController.SendMoveToOpponent(move, _gameController.State.ClientPiece);
                StateHasChanged();
            }
        }
        else
        {
            Console.WriteLine("UI Disabled. Not your turn.");
        }

        await Task.CompletedTask;
    }

    private void ProcessOpponentMove()
    {
        var opponentMove = _gameController.State.OpponentMove;
        var opponentPiece = _gameController.State.OpponentPiece;

        bool moveSucceeded = _gameEngine.TryPlayerMove(opponentMove, opponentPiece);
        if (moveSucceeded)
        {
            IsDisabled = false;
            Console.WriteLine($"ProcessOpponentMove: {opponentPiece}. IsDisabled: {IsDisabled}");
            StateHasChanged();
        }
    }
}
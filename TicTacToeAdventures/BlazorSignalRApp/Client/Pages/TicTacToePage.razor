@using Microsoft.AspNetCore.SignalR.Client
@using TicTacToe.Shared;
@inject NavigationManager NavigationManager

    <div class="board">
        <h1 class="gameTitle">Tic Tac Toe</h1>

        <table>
            <tr>
                <td disabled=@IsDisabled @onclick="(() => UpdateBoard(0))">
                    @_gameEngine.GameBoard[0]
                </td>
                <td  disabled=@IsDisabled @onclick="(() => UpdateBoard(1))" class="vert">
                    @_gameEngine.GameBoard[1]
                </td>
                <td disabled=@IsDisabled @onclick="(() => UpdateBoard(2))">
                    @_gameEngine.GameBoard[2]
                </td>
            </tr>
            <tr>
                <td disabled=@IsDisabled @onclick="(() => UpdateBoard(3))" class="hori">
                    @_gameEngine.GameBoard[3]
                </td>
                <td disabled=@IsDisabled @onclick="(() => UpdateBoard(4))" class="vert hori">
                    @_gameEngine.GameBoard[4]
                </td>
                <td disabled=@IsDisabled @onclick="(() => UpdateBoard(5))" class="hori">
                    @_gameEngine.GameBoard[5]
                </td>
            </tr>
            <tr>
                <td disabled=@IsDisabled @onclick="(() => UpdateBoard(6))">
                    @_gameEngine.GameBoard[6]
                </td>
                <td disabled=@IsDisabled @onclick="(() => UpdateBoard(7))" class="vert">
                    @_gameEngine.GameBoard[7]
                </td>
                <td disabled=@IsDisabled @onclick="(() => UpdateBoard(8))">
                    @_gameEngine.GameBoard[8]
                </td>
            </tr>
        </table>
    </div>

    <h1>@_winMessage</h1>

@code {
    //TODO: Handle players
    //TODO: Check for Win/Tie
    //TODO: Disable UI

    private GameEngine _gameEngine;
    private HubConnection _hubConnection;
    private string _winMessage = null;
    private char _clientPlayer;
    protected bool IsDisabled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _gameEngine = new GameEngine();
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gameHub"))
            .Build();

        _hubConnection.On<string>("ClientLog", ClientLog);
        _hubConnection.On<char>("SetPlayer", SetPlayer);
        _hubConnection.On<int, char>("RecieveMove", RecieveOpponentMove);


        IsDisabled = false;
        await _hubConnection.StartAsync();
    }

    private async Task ClientLog(string msg)
    {
        Console.WriteLine(msg.ToString());
        await Task.CompletedTask;
    }

    private async Task SetPlayer(char player)
    {
        _clientPlayer = player;
        Console.WriteLine(_clientPlayer);
        await Task.CompletedTask;
    }

    private async Task UpdateBoard(int move)
    {
        Console.WriteLine($"UpdateBoardIntro. Is Disabled? {IsDisabled}");
        if (!IsDisabled)
        {
            Console.WriteLine($"{move} was clicked.");

            bool moveSucceeded = _gameEngine.TryPlayerMove(move, _clientPlayer);
            if (moveSucceeded)
            {
                IsDisabled = true;
                Console.WriteLine($"UpdateBoard. Is Disabled? {IsDisabled}");
                await SendMoveToOpponent(move, _clientPlayer);
                StateHasChanged();
            }
        }

        await Task.CompletedTask;
    }

    private async Task SendMoveToOpponent(int move, char player) =>
        await _hubConnection.SendAsync("SendMove", move, player);

    private async Task RecieveOpponentMove(int move, char opponent)
    {
        _gameEngine.TryPlayerMove(move, opponent);

        bool isWinFound =_gameEngine.CheckForWin();
        bool isTieFound = _gameEngine.CheckForTie();

        if (isWinFound)
        {
            //TODO: UpdateUI, End Game.
            Console.WriteLine($"{opponent} wins!");
            _winMessage = $"{opponent} wins!";
            StateHasChanged();
        }
        else if (isTieFound)
        {
            //TODO: UpdateUI, End Game.
            Console.WriteLine("Tie game.");
            _winMessage = $"{opponent} wins!";
            StateHasChanged();
        }
        else
        {
            IsDisabled = false;
            Console.WriteLine($"ReciveMove. Is Disabled? {IsDisabled}");
            StateHasChanged();
            await Task.CompletedTask;
        }
    }

    public bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;
}